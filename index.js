#!/usr/bin/env node

const { program } = require('commander');
const chalk = require('chalk');
const inquirer = require('inquirer');
const fs = require('fs-extra');
const path = require('path');
const { execSync, spawn } = require('child_process');
const ora = require('ora');
const boxen = require('boxen');
const slugify = require('slugify');
const os = require('os');

// Version depuis package.json
const packageJson = require('./package.json');

// Module de d√©ploiement simplifi√©
const deployModule = require('./deploy');

// URL du SDK (d√©p√¥t GitLab priv√©)
const SDK_REPO_URL = 'https://gitlab.com/socotec-blq/sdk-webapp-python.git';

// Fonction pour g√©rer l'authentification GitLab
async function handleGitLabAuth() {
  console.log(chalk.blue('\nüîê Authentification GitLab requise\n'));
  console.log(chalk.yellow('Le SDK TriDyme est h√©berg√© sur un GitLab priv√©.'));
  console.log(chalk.yellow('Vous devez avoir acc√®s au d√©p√¥t pour continuer.\n'));

  const authMethods = await inquirer.prompt([
    {
      type: 'list',
      name: 'method',
      message: 'Comment souhaitez-vous vous authentifier?',
      choices: [
        {
          name: 'üîë Token d\'acc√®s personnel GitLab',
          value: 'token',
        },
        {
          name: 'üë§ Nom d\'utilisateur et mot de passe',
          value: 'credentials',
        },
        {
          name: 'üîß J\'ai d√©j√† configur√© Git avec mes credentials',
          value: 'existing',
        },
      ],
    },
  ]);

  let authUrl = SDK_REPO_URL;

  if (authMethods.method === 'token') {
    const { token } = await inquirer.prompt([
      {
        type: 'password',
        name: 'token',
        message: 'Entrez votre token d\'acc√®s GitLab:',
        validate: (input) => input.trim() ? true : 'Le token est requis',
      },
    ]);
    
    // Format: https://oauth2:TOKEN@gitlab.com/path
    authUrl = SDK_REPO_URL.replace('https://', `https://oauth2:${token}@`);
    
  } else if (authMethods.method === 'credentials') {
    const credentials = await inquirer.prompt([
      {
        type: 'input',
        name: 'username',
        message: 'Nom d\'utilisateur GitLab:',
        validate: (input) => input.trim() ? true : 'Le nom d\'utilisateur est requis',
      },
      {
        type: 'password',
        name: 'password',
        message: 'Mot de passe GitLab:',
        validate: (input) => input.trim() ? true : 'Le mot de passe est requis',
      },
    ]);
    
    // Format: https://username:password@gitlab.com/path
    authUrl = SDK_REPO_URL.replace('https://', `https://${credentials.username}:${credentials.password}@`);
    
  } else if (authMethods.method === 'existing') {
    console.log(chalk.green('‚úÖ Utilisation de la configuration Git existante'));
    authUrl = SDK_REPO_URL;
  }

  return authUrl;
}

// Fonction pour tester l'acc√®s au d√©p√¥t GitLab
async function testGitLabAccess(authUrl, projectPath) {
  const spinner = ora('Test d\'acc√®s au d√©p√¥t GitLab...').start();
  
  try {
    // Tester l'acc√®s avec ls-remote (plus l√©ger qu'un clone)
    execSync(`git ls-remote ${authUrl}`, { 
      cwd: projectPath, 
      stdio: 'pipe',
      timeout: 10000, // 10 secondes timeout
    });
    
    spinner.succeed('Acc√®s au d√©p√¥t GitLab confirm√©');
    return true;
  } catch (error) {
    spinner.fail('√âchec de l\'acc√®s au d√©p√¥t GitLab');
    
    console.error(chalk.red('‚ùå Impossible d\'acc√©der au d√©p√¥t GitLab'));
    console.log(chalk.yellow('\\nCauses possibles:'));
    console.log(chalk.white('‚Ä¢ Credentials incorrects'));
    console.log(chalk.white('‚Ä¢ Pas d\'acc√®s au d√©p√¥t priv√©'));
    console.log(chalk.white('‚Ä¢ Probl√®me de connexion r√©seau'));
    console.log(chalk.white('‚Ä¢ Token expir√© ou r√©voqu√©'));
    
    console.log(chalk.blue('\\nüí° Pour obtenir un token d\'acc√®s:'));
    console.log(chalk.white('1. Connectez-vous √† GitLab'));
    console.log(chalk.white('2. Allez dans Pr√©f√©rences > Tokens d\'acc√®s'));
    console.log(chalk.white('3. Cr√©ez un token avec les permissions \"read_repository\"'));
    
    return false;
  }
}

// Fonction pour v√©rifier la politique d'ex√©cution PowerShell
async function checkPowerShellExecutionPolicy() {
  if (os.platform() !== 'win32') return true;

  try {
    // V√©rifier la politique d'ex√©cution actuelle
    const policyOutput = execSync('powershell -Command "Get-ExecutionPolicy"', {
      stdio: 'pipe',
      encoding: 'utf8',
    }).trim();

    if (policyOutput === 'Restricted') {
      console.log(
        chalk.yellow(
          'La politique d\'ex√©cution PowerShell est actuellement "Restricted".',
        ),
      );
      console.log(
        chalk.yellow("Cela peut emp√™cher l'ex√©cution correcte des scripts."),
      );

      const { modifyPolicy } = await inquirer.prompt([
        {
          type: 'confirm',
          name: 'modifyPolicy',
          message:
            'Voulez-vous temporairement d√©finir la politique sur "RemoteSigned" pour cette session?',
          default: true,
        },
      ]);

      if (modifyPolicy) {
        execSync(
          'powershell -Command "Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process"',
          {
            stdio: 'inherit',
          },
        );
        console.log(
          chalk.green("Politique d'ex√©cution modifi√©e pour cette session."),
        );
      } else {
        console.log(
          chalk.yellow(
            "Vous pourriez rencontrer des probl√®mes avec l'activation des environnements virtuels.",
          ),
        );
      }
    }
    return true;
  } catch (error) {
    console.log(
      chalk.yellow(
        "Impossible de v√©rifier la politique d'ex√©cution PowerShell.",
      ),
    );
    return false;
  }
}

program
  .version(packageJson.version)
  .description('CLI pour cr√©er et g√©rer des applications TriDyme');

// Commande pour cr√©er un nouveau projet
program
  .command('create [nom-projet]')
  .description("Cr√©er un nouveau projet d'application TriDyme")
  .action(async (nomProjet) => {
    try {
      // V√©rifier la politique d'ex√©cution PowerShell sur Windows
      if (os.platform() === 'win32') {
        await checkPowerShellExecutionPolicy();
      }

      // Si nom du projet n'est pas fourni, demander √† l'utilisateur
      if (!nomProjet) {
        const response = await inquirer.prompt([
          {
            type: 'input',
            name: 'nomProjet',
            message: 'Entrez le nom de votre projet:',
            validate: (input) =>
              input.trim() !== ''
                ? true
                : 'Le nom du projet ne peut pas √™tre vide',
          },
        ]);
        nomProjet = response.nomProjet;
      }

      // Slug du nom pour le dossier
      const projectSlug = slugify(nomProjet, { lower: true });
      const projectPath = path.join(process.cwd(), projectSlug);

      // V√©rifier si le dossier existe d√©j√†
      if (fs.existsSync(projectPath)) {
        console.error(chalk.red(`Le dossier ${projectSlug} existe d√©j√†.`));
        return;
      }

      // G√©n√©rer un ID MongoDB-like
      const generateMongoObjectId = () => {
        const timestamp = ((new Date().getTime() / 1000) | 0).toString(16);
        return (
          timestamp +
          'xxxxxxxxxxxxxxxx'
            .replace(/[x]/g, () => {
              return ((Math.random() * 16) | 0).toString(16);
            })
            .toLowerCase()
        );
      };

      // Demander des informations suppl√©mentaires
      const answers = await inquirer.prompt([
        {
          type: 'input',
          name: 'applicationName',
          message: "Nom de l'application:",
          default: nomProjet,
          validate: (input) =>
            input.trim() !== ''
              ? true
              : "Le nom de l'application ne peut pas √™tre vide",
        },
        {
          type: 'input',
          name: 'companyName',
          message: 'Nom de votre entreprise:',
          default: 'TriDyme',
        },
        {
          type: 'input',
          name: 'platformApiUrl',
          message: 'URL de la plateforme API:',
          default: 'https://platform.tridyme.com/api',
        },
      ]);

      // Pr√©parer les variables pour les fichiers de configuration
      const applicationId = generateMongoObjectId();
      const applicationSlug = slugify(answers.applicationName, { lower: true });
      const renderUrl = `https://${applicationSlug}.onrender.com`;
      const platformApiToken =
        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQHRyaWR5bWUuY29tIiwiX2lkIjoiNTg5OWUwYWNhNjAwNzQxNzU1NDMzOTAyIiwiaWF0IjoxNjg4NDY3NzA2fQ.FGDbvEVZnDIVNjsi0izrt-63lVndg7EnNpDK9BO1LiE';

      // Afficher un r√©sum√©
      console.log(
        boxen(
          chalk.bold('R√©sum√© du projet √† cr√©er:') +
            '\n\n' +
            `${chalk.cyan('Nom du projet:')} ${nomProjet}\n` +
            `${chalk.cyan("Nom de l'application:")} ${
              answers.applicationName
            }\n` +
            `${chalk.cyan('Entreprise:')} ${answers.companyName}\n` +
            `${chalk.cyan("URL de l'application:")} ${renderUrl}\n` +
            `${chalk.cyan('URL de la plateforme API:')} ${
              answers.platformApiUrl
            }\n` +
            `${chalk.cyan("ID de l'application:")} ${applicationId}`,
          { padding: 1, borderColor: 'green', margin: 1 },
        ),
      );

      const confirmCreate = await inquirer.prompt([
        {
          type: 'confirm',
          name: 'continue',
          message: 'Voulez-vous continuer avec ces param√®tres?',
          default: true,
        },
      ]);

      if (!confirmCreate.continue) {
        console.log(chalk.yellow('Cr√©ation du projet annul√©e.'));
        return;
      }

      // Cr√©er le dossier du projet
      fs.mkdirSync(projectPath, { recursive: true });

      // G√©rer l'authentification GitLab
      let authUrl;
      let accessGranted = false;
      let retryCount = 0;
      const maxRetries = 3;

      while (!accessGranted && retryCount < maxRetries) {
        try {
          authUrl = await handleGitLabAuth();
          accessGranted = await testGitLabAccess(authUrl, projectPath);
          
          if (!accessGranted) {
            retryCount++;
            if (retryCount < maxRetries) {
              const { retry } = await inquirer.prompt([
                {
                  type: 'confirm',
                  name: 'retry',
                  message: 'Voulez-vous r√©essayer avec d\'autres credentials?',
                  default: true,
                },
              ]);
              
              if (!retry) break;
            }
          }
        } catch (error) {
          console.error(chalk.red(`Erreur d'authentification: ${error.message}`));
          break;
        }
      }

      if (!accessGranted) {
        console.error(chalk.red('‚ùå Impossible d\'acc√©der au SDK TriDyme'));
        console.log(chalk.yellow('Contactez votre administrateur pour obtenir l\'acc√®s au d√©p√¥t GitLab.'));
        return;
      }

      // Clone le r√©f√©rentiel avec authentification
      const spinner = ora('Clonage du SDK TriDyme...').start();
      try {
        execSync(
          `git clone ${authUrl} .`,
          { cwd: projectPath, stdio: 'pipe' },
        );
        spinner.succeed('SDK TriDyme clon√© avec succ√®s');
      } catch (error) {
        spinner.fail('√âchec du clonage du SDK');
        console.error(chalk.red(`Erreur lors du clonage: ${error.message}`));
        return;
      }

      // Nettoyer le dossier .git
      fs.removeSync(path.join(projectPath, '.git'));

      // S'assurer que les scripts d'initialisation sont ex√©cutables
      try {
        if (os.platform() !== 'win32') {
          execSync('chmod +x init.sh', { cwd: projectPath, stdio: 'pipe' });
          execSync('chmod +x start.sh', { cwd: projectPath, stdio: 'pipe' });
        }
      } catch (error) {
        spinner.warn(
          'Impossible de rendre les scripts ex√©cutables. Vous devrez peut-√™tre le faire manuellement.',
        );
      }

      const envFilePath = path.join(projectPath, '.env');
      const envDevPath = path.join(projectPath, 'frontend', '.env.development');
      const envProdPath = path.join(projectPath, 'frontend', '.env.production');

      // Cr√©er le contenu des fichiers .env
      const envDevContent = `ENVIRONMENT="development"
REACT_APP_LOGO="./logo.svg"
REACT_APP_COMPANY="${answers.companyName}"
REACT_APP_APPLICATION_NAME="${answers.applicationName}"
REACT_APP_APPLICATION_API_URL="http://localhost:8000"
REACT_APP_PLATFORM_API_URL="${answers.platformApiUrl}"
REACT_APP_PLATFORM_API_TOKEN="${platformApiToken}"
REACT_APP_APPLICATION_ID="${applicationId}"
NODE_PATH=./..
CI=false`;

      const envProdContent = `ENVIRONMENT="production"
REACT_APP_LOGO="./logo.svg"
REACT_APP_COMPANY="${answers.companyName}"
REACT_APP_APPLICATION_NAME="${answers.applicationName}"
REACT_APP_APPLICATION_API_URL="${renderUrl}"
REACT_APP_PLATFORM_API_URL="${answers.platformApiUrl}"
REACT_APP_PLATFORM_API_TOKEN="${platformApiToken}"
REACT_APP_APPLICATION_ID="${applicationId}"
NODE_PATH=./..
CI=false`;

      const envContent = `ENVIRONMENT="development"
REACT_APP_LOGO="./logo.svg"
REACT_APP_COMPANY="${answers.companyName}"
REACT_APP_APPLICATION_NAME="${answers.applicationName}"
REACT_APP_APPLICATION_API_URL="${renderUrl}"
REACT_APP_PLATFORM_API_URL="${answers.platformApiUrl}"
REACT_APP_PLATFORM_API_TOKEN="${platformApiToken}"
REACT_APP_APPLICATION_ID="${applicationId}"
NODE_PATH=./..
CI=false`;

      // Cr√©er les r√©pertoires si n√©cessaire
      const frontendDir = path.join(projectPath, 'frontend');
      if (!fs.existsSync(frontendDir)) {
        fs.mkdirSync(frontendDir, { recursive: true });
      }

      // √âcrire les fichiers .env
      fs.writeFileSync(envDevPath, envDevContent);
      fs.writeFileSync(envProdPath, envProdContent);
      fs.writeFileSync(envFilePath, envContent);

      // Mettre √† jour package.json
      const packageJsonPath = path.join(
        projectPath,
        'frontend',
        'package.json',
      );
      if (fs.existsSync(packageJsonPath)) {
        const packageData = fs.readJsonSync(packageJsonPath);
        packageData.name = projectSlug;
        packageData.homepage = '.';
        fs.writeJsonSync(packageJsonPath, packageData, { spaces: 2 });
      }

      // Initialiser le projet - cr√©ation de l'environnement virtuel et installation des d√©pendances backend
      spinner.text = "Cr√©ation de l'environnement Python...";
      spinner.start();

      try {
        // Cr√©er l'environnement virtuel Python
        const pythonCmd = os.platform() === 'win32' ? 'python' : 'python3';
        execSync(`${pythonCmd} -m venv env`, {
          cwd: path.join(projectPath, 'backend'),
          stdio: 'pipe',
          shell: os.platform() === 'win32' ? true : '/bin/bash',
        });
        spinner.succeed('Environnement Python cr√©√©');

        // Installer les d√©pendances Python
        spinner.text = 'Installation des d√©pendances Python...';
        spinner.start();

        if (os.platform() === 'win32') {
          execSync(
            `.\\env\\Scripts\\python.exe -m pip install --upgrade pip`,
            {
              cwd: path.join(projectPath, 'backend'),
              stdio: 'pipe',
              shell: true,
            },
          );

          execSync(
            `.\\env\\Scripts\\pip.exe install -r requirements.txt`,
            {
              cwd: path.join(projectPath, 'backend'),
              stdio: 'pipe',
              shell: true,
            },
          );
        } else {
          // Approche Unix/macOS - utiliser directement les ex√©cutables de l'environnement virtuel
          const pythonPath = path.join(projectPath, 'backend', 'env', 'bin', 'python');
          const pipPath = path.join(projectPath, 'backend', 'env', 'bin', 'pip');
          
          execSync(`${pythonPath} -m pip install --upgrade pip`, {
            cwd: path.join(projectPath, 'backend'),
            stdio: 'pipe',
            shell: '/bin/bash',
          });

          execSync(`${pipPath} install -r requirements.txt`, {
            cwd: path.join(projectPath, 'backend'),
            stdio: 'pipe',
            shell: '/bin/bash',
          });
        }

        spinner.succeed('D√©pendances Python install√©es');

        // Installer les d√©pendances frontend
        spinner.text = 'Installation des d√©pendances frontend...';
        spinner.start();

        execSync('npm install', {
          cwd: path.join(projectPath, 'frontend'),
          stdio: 'pipe',
          shell: os.platform() === 'win32' ? true : '/bin/bash',
        });

        execSync('npm install', {
          cwd: path.join(projectPath, 'frontend', 'module-federation'),
          stdio: 'pipe',
          shell: os.platform() === 'win32' ? true : '/bin/bash',
        });

        spinner.succeed('D√©pendances frontend install√©es');

        // Tout a r√©ussi
        console.log(chalk.green('‚úÖ Projet initialis√© avec succ√®s'));
      } catch (error) {
        spinner.fail("√âchec de l'initialisation du projet");
        console.error(
          chalk.red(`Erreur lors de l'initialisation: ${error.message}`),
        );

        if (os.platform() === 'win32') {
          console.log(
            chalk.yellow('\nConseils de d√©pannage sp√©cifiques √† Windows:'),
          );
          console.log(
            chalk.yellow(
              "- V√©rifiez que vous ex√©cutez le terminal en tant qu'administrateur",
            ),
          );
          console.log(
            chalk.yellow(
              '- Ex√©cutez la commande: Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process',
            ),
          );
          console.log(
            chalk.yellow(
              '- Assurez-vous que Python est accessible avec la commande "python" (et non python3)',
            ),
          );
          console.log(
            chalk.yellow(
              '- V√©rifiez votre PATH Windows pour vous assurer que Python y figure',
            ),
          );
        }

        console.log(chalk.yellow('\nConseils g√©n√©raux:'));
        console.log(
          chalk.yellow(
            '- Assurez-vous que Python est correctement install√© et accessible dans le PATH',
          ),
        );
        console.log(
          chalk.yellow(
            '- V√©rifiez que Node.js et npm sont correctement install√©s',
          ),
        );
        console.log(
          chalk.yellow(
            "- Essayez d'initialiser manuellement le projet en suivant les instructions du README",
          ),
        );
        return;
      }

      console.log(
        boxen(
          chalk.green.bold('‚ú® Projet cr√©√© avec succ√®s! ‚ú®') +
            '\n\n' +
            `${chalk.cyan('Pour d√©marrer votre projet:')}\n\n` +
            `  cd ${projectSlug}\n` +
            `  tridyme dev\n\n` +
            `${chalk.cyan("Pour plus d'informations:")}\n` +
            `  tridyme --help`,
          { padding: 1, borderColor: 'green', margin: 1 },
        ),
      );
    } catch (error) {
      console.error(chalk.red(`Une erreur est survenue: ${error.message}`));
    }
  });

// Commande pour d√©marrer le projet en mode d√©veloppement
program
  .command('dev')
  .description('Lancer le projet en mode d√©veloppement')
  .action(async () => {
    // V√©rifier la politique d'ex√©cution PowerShell sur Windows
    if (os.platform() === 'win32') {
      await checkPowerShellExecutionPolicy();
    }

    console.log(chalk.blue('D√©marrage du projet en mode d√©veloppement...'));

    // V√©rifier si l'environnement virtuel Python est activ√© et les d√©pendances sont install√©es
    const spinner = ora("V√©rification de l'environnement Python...").start();

    try {
      // V√©rifier si le dossier env existe dans backend
      if (!fs.existsSync(path.join(process.cwd(), 'backend', 'env'))) {
        spinner.warn('Environnement virtuel Python non trouv√©');

        // Cr√©er l'environnement virtuel
        spinner.text = "Cr√©ation de l'environnement virtuel Python...";
        spinner.start();

        const createEnvCommand =
          os.platform() === 'win32'
            ? 'python -m venv env'
            : 'python3 -m venv env';

        try {
          execSync(createEnvCommand, {
            cwd: path.join(process.cwd(), 'backend'),
            stdio: 'pipe',
            shell: os.platform() === 'win32' ? true : '/bin/bash',
          });
          spinner.succeed('Environnement virtuel Python cr√©√©');
        } catch (error) {
          spinner.fail(
            "√âchec de la cr√©ation de l'environnement virtuel Python",
          );
          console.error(chalk.red(`Erreur: ${error.message}`));
          
          // Diagnostics plus d√©taill√©s
          console.log(chalk.yellow('\nüîç Diagnostic:'));
          
          // V√©rifier si Python est disponible
          try {
            const pythonVersion = execSync(os.platform() === 'win32' ? 'python --version' : 'python3 --version', {
              stdio: 'pipe',
              encoding: 'utf8',
            });
            console.log(chalk.green(`‚úÖ Python trouv√©: ${pythonVersion.trim()}`));
          } catch (pythonError) {
            console.log(chalk.red('‚ùå Python non trouv√© dans le PATH'));
            console.log(chalk.yellow('üí° Installez Python depuis https://python.org'));
            return;
          }
          
          // V√©rifier les permissions
          const backendPath = path.join(process.cwd(), 'backend');
          if (!fs.existsSync(backendPath)) {
            console.log(chalk.red('‚ùå Dossier backend non trouv√©'));
            console.log(chalk.yellow('üí° Assurez-vous d\'√™tre dans un projet TriDyme valide'));
            return;
          }
          
          console.log(chalk.yellow('üí° Essayez de cr√©er l\'environnement manuellement:'));
          const manualCmd = os.platform() === 'win32' 
            ? 'cd backend && python -m venv env'
            : 'cd backend && python3 -m venv env';
          console.log(chalk.white(`   ${manualCmd}`));
          return;
        }
      }

      // Installer les d√©pendances Python
      spinner.text = 'Installation des d√©pendances Python...';
      spinner.start();

      try {
        if (os.platform() === 'win32') {
          // Approche sp√©cifique √† Windows
          // Mise √† jour de pip sans utiliser activate
          execSync(`.\\env\\Scripts\\python.exe -m pip install --upgrade pip`, {
            cwd: path.join(process.cwd(), 'backend'),
            stdio: 'pipe',
            shell: true,
          });

          // Installation des d√©pendances sans utiliser activate
          execSync(`.\\env\\Scripts\\pip.exe install -r requirements.txt`, {
            cwd: path.join(process.cwd(), 'backend'),
            stdio: 'pipe',
            shell: true,
          });
        } else {
          // Approche Unix/macOS - utiliser directement l'ex√©cutable Python de l'environnement virtuel
          const pythonPath = path.join(process.cwd(), 'backend', 'env', 'bin', 'python');
          const pipPath = path.join(process.cwd(), 'backend', 'env', 'bin', 'pip');
          
          // Mise √† jour de pip
          execSync(`${pythonPath} -m pip install --upgrade pip`, {
            cwd: path.join(process.cwd(), 'backend'),
            stdio: 'pipe',
            shell: '/bin/bash',
          });
          
          // Installation des d√©pendances
          execSync(`${pipPath} install -r requirements.txt`, {
            cwd: path.join(process.cwd(), 'backend'),
            stdio: 'pipe',
            shell: '/bin/bash',
          });
        }

        spinner.succeed('D√©pendances Python install√©es');
      } catch (error) {
        spinner.fail("√âchec de l'installation des d√©pendances Python");
        console.error(chalk.red(`Erreur: ${error.message}`));
        return;
      }

      spinner.succeed('Environnement Python pr√™t');
    } catch (error) {
      spinner.fail("Erreur lors de la v√©rification de l'environnement Python");
      console.error(chalk.red(`Erreur: ${error.message}`));
      return;
    }

    // Lancer le backend avec l'environnement virtuel
    let backendProcess;
    if (os.platform() === 'win32') {
      // Approche sp√©cifique √† Windows
      const pythonExe = path.join(process.cwd(), 'backend', 'env', 'Scripts', 'python.exe');
      backendProcess = spawn(pythonExe, ['main.py'], {
        cwd: path.join(process.cwd(), 'backend'),
        stdio: 'inherit',
      });
    } else {
      // Approche Unix/macOS - utiliser directement l'ex√©cutable Python de l'environnement virtuel
      const pythonExe = path.join(process.cwd(), 'backend', 'env', 'bin', 'python');
      backendProcess = spawn(pythonExe, ['main.py'], {
        cwd: path.join(process.cwd(), 'backend'),
        stdio: 'inherit',
      });
    }

    // Attendre un peu que le backend d√©marre
    setTimeout(() => {
      // Lancer le frontend
      const frontendProcess = spawn('npm', ['run', 'start'], {
        cwd: path.join(process.cwd(), 'frontend'),
        stdio: 'inherit',
        shell: true,
      });

      process.on('SIGINT', () => {
        backendProcess.kill('SIGINT');
        frontendProcess.kill('SIGINT');
        process.exit();
      });

      frontendProcess.on('close', (code) => {
        if (code !== 0) {
          console.log(
            chalk.red(
              `Le processus frontend s'est arr√™t√© avec le code: ${code}`,
            ),
          );
        }
        backendProcess.kill('SIGINT');
        process.exit(code);
      });
    }, 2000);

    backendProcess.on('close', (code) => {
      if (code !== 0) {
        console.log(
          chalk.red(`Le processus backend s'est arr√™t√© avec le code: ${code}`),
        );
        console.log(
          chalk.yellow(
            "Astuce: V√©rifiez les journaux ci-dessus pour plus de d√©tails sur l'erreur.",
          ),
        );
        process.exit(code);
      }
    });
  });

// Commande pour construire le projet
program
  .command('build')
  .description('Construire le projet pour la production')
  .action(() => {
    console.log(chalk.blue('Construction du projet pour la production...'));

    try {
      execSync('npm run build', { 
        cwd: path.join(process.cwd(), 'frontend'),
        stdio: 'inherit',
        shell: os.platform() === 'win32' ? true : '/bin/bash',
      });
      console.log(chalk.green('‚úÖ Projet construit avec succ√®s!'));
    } catch (error) {
      console.error(
        chalk.red(`Erreur lors de la construction: ${error.message}`),
      );
    }
  });

// Commande pour d√©ployer l'application
program
  .command('deploy')
  .description("D√©ployer l'application via CI/CD")
  .option(
    '--env <environment>',
    'Environnement (development|production)',
    'development',
  )
  .action(async (options) => {
    await deployModule.initiateCICDDeploy({
      projectPath: process.cwd(),
      environment: options.env,
    });
  });





// Commande pour mettre √† jour le SDK
program
  .command('update')
  .description('Mettre √† jour le SDK TriDyme')
  .action(async () => {
    // V√©rifier la politique d'ex√©cution PowerShell sur Windows
    if (os.platform() === 'win32') {
      await checkPowerShellExecutionPolicy();
    }

    console.log(chalk.blue('V√©rification des mises √† jour du SDK...'));

    // V√©rifier si nous sommes dans un projet TriDyme
    if (!fs.existsSync('backend') || !fs.existsSync('frontend')) {
      console.error(
        chalk.red('Ce dossier ne semble pas √™tre un projet TriDyme valide.'),
      );
      return;
    }

    const { continue: confirmUpdate } = await inquirer.prompt([
      {
        type: 'confirm',
        name: 'continue',
        message:
          'Cela peut √©craser vos modifications. Avez-vous sauvegard√© vos changements? Voulez-vous continuer?',
        default: false,
      },
    ]);

    if (!confirmUpdate) {
      console.log(chalk.yellow('Mise √† jour annul√©e.'));
      return;
    }

    // Cr√©er un dossier temporaire pour le nouveau SDK
    const tempDir = path.join(os.tmpdir(), 'tridyme-sdk-update-' + Date.now());
    fs.mkdirSync(tempDir, { recursive: true });

    // G√©rer l'authentification GitLab pour la mise √† jour
    let authUrl;
    let accessGranted = false;
    let retryCount = 0;
    const maxRetries = 3;

    while (!accessGranted && retryCount < maxRetries) {
      try {
        authUrl = await handleGitLabAuth();
        accessGranted = await testGitLabAccess(authUrl, tempDir);
        
        if (!accessGranted) {
          retryCount++;
          if (retryCount < maxRetries) {
            const { retry } = await inquirer.prompt([
              {
                type: 'confirm',
                name: 'retry',
                message: 'Voulez-vous r√©essayer avec d\'autres credentials?',
                default: true,
              },
            ]);
            
            if (!retry) break;
          }
        }
      } catch (error) {
        console.error(chalk.red(`Erreur d'authentification: ${error.message}`));
        break;
      }
    }

    if (!accessGranted) {
      console.error(chalk.red('‚ùå Impossible d\'acc√©der au SDK TriDyme'));
      console.log(chalk.yellow('Contactez votre administrateur pour obtenir l\'acc√®s au d√©p√¥t GitLab.'));
      fs.removeSync(tempDir);
      return;
    }

    const spinner = ora('T√©l√©chargement du SDK le plus r√©cent...').start();

    try {
      execSync(`git clone ${authUrl} .`, {
        cwd: tempDir,
        stdio: 'pipe',
      });
      spinner.succeed('SDK t√©l√©charg√© avec succ√®s');
    } catch (error) {
      spinner.fail('√âchec du t√©l√©chargement du SDK');
      console.error(chalk.red(`Erreur: ${error.message}`));
      fs.removeSync(tempDir);
      return;
    }

    // Sauvegarder les fichiers personnalis√©s
    spinner.text = 'Sauvegarde de vos fichiers personnalis√©s...';
    spinner.start();

    // Fichiers √† sauvegarder
    const filesToSave = [
      '.env',
      'frontend/.env.development',
      'frontend/.env.production',
      'frontend/src/Views',
    ];

    const savedFiles = {};

    filesToSave.forEach((filePath) => {
      if (fs.existsSync(filePath)) {
        if (fs.statSync(filePath).isDirectory()) {
          savedFiles[filePath] = {};
          // R√©cursive copy of directory content
          const copyDirRecursively = (src, dest = {}) => {
            const files = fs.readdirSync(src);
            files.forEach((file) => {
              const srcPath = path.join(src, file);
              if (fs.statSync(srcPath).isDirectory()) {
                dest[file] = {};
                copyDirRecursively(srcPath, dest[file]);
              } else {
                dest[file] = fs.readFileSync(srcPath, 'utf8');
              }
            });
          };
          copyDirRecursively(filePath, savedFiles[filePath]);
        } else {
          savedFiles[filePath] = fs.readFileSync(filePath, 'utf8');
        }
      }
    });

    spinner.succeed('Fichiers personnalis√©s sauvegard√©s');

    // Copier le nouveau SDK en excluant .git
    spinner.text = 'Mise √† jour du SDK...';
    spinner.start();

    try {
      fs.copySync(tempDir, '.', {
        filter: (src) => !src.includes('.git'),
        overwrite: true,
      });
      spinner.succeed('SDK mis √† jour avec succ√®s');
    } catch (error) {
      spinner.fail('√âchec de la mise √† jour du SDK');
      console.error(chalk.red(`Erreur: ${error.message}`));
      fs.removeSync(tempDir);
      return;
    }

    // Restaurer les fichiers personnalis√©s
    spinner.text = 'Restauration de vos fichiers personnalis√©s...';
    spinner.start();

    Object.entries(savedFiles).forEach(([filePath, content]) => {
      if (typeof content === 'string') {
        fs.writeFileSync(filePath, content);
      } else {
        // Recursively restore directory
        const restoreDirRecursively = (destPath, contentObj) => {
          if (!fs.existsSync(destPath)) {
            fs.mkdirSync(destPath, { recursive: true });
          }

          Object.entries(contentObj).forEach(([file, fileContent]) => {
            const fileDest = path.join(destPath, file);
            if (typeof fileContent === 'string') {
              fs.writeFileSync(fileDest, fileContent);
            } else {
              restoreDirRecursively(fileDest, fileContent);
            }
          });
        };
        restoreDirRecursively(filePath, content);
      }
    });

    spinner.succeed('Fichiers personnalis√©s restaur√©s');

    // Nettoyage
    fs.removeSync(tempDir);

    console.log(
      boxen(
        chalk.green.bold('‚ú® SDK mis √† jour avec succ√®s! ‚ú®') +
          '\n\n' +
          'Vos fichiers personnalis√©s ont √©t√© pr√©serv√©s.\n' +
          'Vous devrez peut-√™tre reconstruire le projet pour que les changements prennent effet.',
        { padding: 1, borderColor: 'green', margin: 1 },
      ),
    );
  });

program.parse(process.argv);

// Si aucune commande n'est sp√©cifi√©e, afficher l'aide
if (!process.argv.slice(2).length) {
  program.outputHelp();
}
