{"version":3,"file":"static/js/912.51bd8456.chunk.js","mappings":"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","sources":["App.js","serviceWorker.js","bootstrap.js"],"sourcesContent":["import React, { Component, useState, useEffect, useMemo } from 'react';\nimport Helmet from 'react-helmet';\nimport {\n  Router,\n  Switch,\n  Route,\n  Redirect,\n  BrowserRouter,\n} from 'react-router-dom';\nimport './App.css';\nimport history from './history';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { ThemeProvider, createTheme } from '@material-ui/core/styles';\nimport AppContainerElem from './Components/AppContainerElem';\nimport {\n  ListItem,\n  ListItemAvatar,\n  Avatar,\n  ListItemText,\n} from '@material-ui/core';\nimport Icon from './logo.svg';\nimport Logo from './logo.svg';\nimport RectangularSectionAnalysis from './Views/RectangularSectionAnalysis/RectangularSectionAnalysis';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport LogoApp from './EC2-Ferraillage.svg';\nimport GetTheme from './theme';\n\nconst Menu = {\n  MenuNavBar: [{ text: '', link: '', href: '', icon: '' }],\n  MenuSideBarSup: [\n    {\n      text: 'Plateforme',\n      link: '',\n      href: 'http://socotec.tridyme.com/dashboard',\n      icon: <DashboardIcon />,\n    },\n  ],\n  MenuSideBarInf: [\n    {\n      text: 'GitHub',\n      link: '',\n      href: 'https://github.com/Igor-TriDyme/bolts-app.git',\n      icon: 'code',\n    },\n  ],\n\n  MenuSideBarNotion: [\n    {\n      text: 'Documentation',\n      link: '',\n      href: 'https://www.notion.so/tridyme/CB71-RectangularSection-Calcul-de-pannes-et-poutres-en-bois-3da4109cc8194f47aade5d4cbb554273',\n      icon: 'code',\n    },\n  ],\n};\n\nconst {\n  REACT_APP_LOGO,\n  REACT_APP_COMPANY,\n  REACT_APP_APPLICATION_ID,\n  REACT_APP_PLATFORM_URL,\n} = process.env;\n\nconst App = () => {\n  console.log('REACT_APP_APPLICATION_ID', REACT_APP_APPLICATION_ID);\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  const theme = useMemo(\n    () => createTheme(GetTheme({ prefersDarkMode })),\n    [prefersDarkMode],\n  );\n\n  useEffect(() => {\n    const init = async () => {\n      const userInfo = localStorage.getItem('user');\n      console.log('user', userInfo);\n      const newUser = JSON.parse(userInfo);\n      console.log('newUser', newUser);\n    };\n    init();\n  }, []);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Helmet>\n        <title>{`TriDyme | Applications`}</title>\n        <link rel=\"icon\" type=\"image/png\" href={Logo} sizes=\"16x16\" />\n      </Helmet>\n      <BrowserRouter history={history}>\n        <AppContainerElem\n          title={\n            <ListItem>\n              <ListItemAvatar>\n                <Avatar\n                  alt={`EC2-Ferraillage`}\n                  src={LogoApp}\n                  style={{ borderRadius: '0%' }}\n                />\n              </ListItemAvatar>\n              <ListItemText primary={`EC2- Ferraillage`} />\n            </ListItem>\n          }\n          menu={Menu}\n        >\n          <Switch>\n            <Route\n              exact\n              path={`/applications/ID${REACT_APP_APPLICATION_ID}`}\n              component={RectangularSectionAnalysis}\n            />\n            <Route\n              exact\n              path={`/applications/ID${REACT_APP_APPLICATION_ID}/models/:modelId`}\n              component={RectangularSectionAnalysis}\n            />\n            <Redirect\n              from=\"/\"\n              to={`/applications/ID${REACT_APP_APPLICATION_ID}`}\n              component={RectangularSectionAnalysis}\n            />\n          </Switch>\n        </AppContainerElem>\n      </BrowserRouter>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"names":["Menu","MenuNavBar","text","link","href","icon","MenuSideBarSup","_jsx","DashboardIcon","MenuSideBarInf","MenuSideBarNotion","REACT_APP_LOGO","REACT_APP_COMPANY","REACT_APP_APPLICATION_ID","REACT_APP_PLATFORM_URL","process","App","console","log","prefersDarkMode","useMediaQuery","theme","useMemo","createTheme","GetTheme","useEffect","async","userInfo","localStorage","getItem","newUser","JSON","parse","init","_jsxs","ThemeProvider","children","Helmet","rel","type","Logo","sizes","BrowserRouter","history","AppContainerElem","title","ListItem","ListItemAvatar","Avatar","alt","src","LogoApp","style","borderRadius","ListItemText","primary","menu","Switch","Route","exact","path","concat","component","RectangularSectionAnalysis","Redirect","from","to","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"sourceRoot":""}